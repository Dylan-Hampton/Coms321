//Dylan Hampton, netid: dhampton

main:
ADDI X1, XZR, #0 //setting array address to 0
ADDI X2, XZR, #10 //length of array

SUBI SP, SP, #16 //make room for 2 registers on stack
STUR X1, [SP, #0] //store both address and length
STUR X2, [SP, #8] 

BL fill //populate array
DUMP //print out original unsorted array

LDUR X2, [SP, #8] //restore stored registers
LDUR X1, [SP, #0]
ADDI SP, SP, #16 //give stack space back

SUBI X2, X2, #1 //length - 1
BL insertionSort //start the sorting

B end //dumps out sorted array

insertionSort:
SUBI SP, SP, #32 //make room for 4 registers on the stack
STUR X11, [SP, #0] //i
STUR X2, [SP, #8] //length - 1
STUR X1, [SP, #16] //address
STUR LR, [SP, #24]

ADD X3, X2, XZR //X3 = length-1 
ADD X2, X11, XZR //X2 = i

BL insertSortedPos

LDUR LR, [SP, #24] //restore stored registers
LDUR X1, [SP, #16]
LDUR X2, [SP, #8]
LDUR X11, [SP, #0]
ADDI SP, SP, #32 //give stack space back

SUB X18, X2, X11 //X18 = (length - 1) - i
CBZ X18, insertionSortReturn //if X18 is 0 we are done with the array
ADDI X11, X11, #1 //else i++
B insertionSort //loop
insertionSortReturn:
BR LR

insertSortedPos:
LSL X21, X2, #3 //X21 = X2 * 8 for address of arr[i]
LDUR X11, [X21, #0] //X11 = arr[i]

SUBI SP, SP, #32 //make room for 4 registers on stack
STUR X11, [SP, #0] //val
STUR X2, [SP, #8] //i
STUR X1, [SP, #16] //address
STUR LR, [SP, #24]

ADD X2, X11, XZR //X2 = val

BL findSortedPos

ADD X18, X1, XZR //X18 = sorted pos index

LDUR LR, [SP, #24] //restore stored registers
LDUR X1, [SP, #16]
LDUR X2, [SP, #8]
LDUR X11, [SP, #0]
ADDI SP, SP, #32 //give stack space back

SUBI SP, SP, #40 //make room for 5 registers since we now have X18 holding pos
STUR X18, [SP, #0] //store registers
STUR X11, [SP, #8]
STUR X2, [SP, #16]
STUR X1, [SP, #24]
STUR LR, [SP, #32]

ADD X3, X2, XZR //X3 = X2
ADD X2, X18, XZR //X2 = X18

BL shiftRight

LDUR LR, [SP, #32] //restore stored registers
LDUR X1, [SP, #24]
LDUR X2, [SP, #16]
LDUR X11, [SP, #8]
LDUR X18, [SP, #0]
ADDI SP, SP, #40 //give stack space back

LSL X18, X18, #3 //X18 = X18 * 8
STUR X11, [X18, #0] //arr[pos] = val
BR LR //return


findSortedPos:
LDUR X11, [X1, #0] //X11 = arr[X1]

SUBS XZR, X11, X2
B.GE findSortedPosReturn//if X11 >= X2 return
ADDI X1, X1, #8//else arr address + 1
B findSortedPos //loop

findSortedPosReturn:
BR LR


shiftRight:
SUB X11, X3, X2 //X11 = X3-X2
CBZ X11, shiftRightReturn //if X11 is zero shift is done

SUBI X3, X3, #1 //X3--
LSL X1, X3, #3 //X1 = X3 * 8

LDUR X18, [X1, #8] //X18 = arr[X1+1]
LDUR X11, [X1, #0] //X11 = arr[X1]
STUR X11, [X1, #8] //arr[X1+1] = arr[X1]
B shiftRight

shiftRightReturn:
BR LR


fill:
CBZ X2, fillReturn //check if array length is 0, if so we are done
STUR X2, [X1, #0] //arr[i] = i
SUBI X2, X2, #1 //i--
ADDI X1, X1, #8 //move pointer over 1
B fill //loop
fillReturn: //return to calling procedure
BR LR

end:
DUMP //prints out sorted array

